# Shell
## shell中各种括号的作用
[shell各种括号的作用](http://blog.csdn.net/taiyang1987912/article/details/39551385)

## Shell printf命令
默认printf不会像 echo 自动添加换行符，我们可以手动添加 \n。
printf 命令的语法：
```
printf format-string [arguments...]
```

%c表示输出一个字符
%d表示输出一个整数
%s表示输出一个字符串 
%-10s 指一个宽度为10个字符（-表示左对齐，没有则表示右对齐），任何字符都会被显示在10个字符宽的字符内，如果不足则自动以空格填充，超过也会将内容全部显示出来。
%-4.2f 指格式化为小数，其中.2指保留2位小数。

## Shell 控制流程语句
####    if
```
if condition
then
    command1 
    command2
    ...
fi
``` 

```
if condition
then 
    command1
    ...
else
    command
fi
```

```
a=10
b=20
if [ $a == $b ]
then
   echo "a 等于 b"
elif [ $a -gt $b ]
then
   echo "a 大于 b"
elif [ $a -lt $b ]
then
   echo "a 小于 b"
else
   echo "没有符合的条件"
fi
```
#### for循环语句
```
for var in item1 item2 ... itemN
do
    command1
    command2
    ...
    commandN
done
```
#### while 语句
```
while condition
do
    command
done
```

## Shell 函数

```
[ function ] funname [()]

{

    action;

    [return int;]

}
```
函数返回值在调用该函数后通过 $? 来获得。
注意：所有函数在使用前必须定义。这意味着必须将函数放在脚本开始部分，直至shell解释器首次发现它时，才可以使用。调用函数仅使用其函数名即可。

#####函数参数
在Shell中，调用函数时可以向其传递参数。在函数体内部，通过 $n 的形式来获取参数的值，例如，$1表示第一个参数，$2表示第二个参数...

注意，$10 不能获取第十个参数，获取第十个参数需要${10}。当n>=10时，需要使用${n}来获取参数。


| $# | 传递到脚本的参数个数  |
| --- | --- |
| $* | 以一个单字符串显示所有向脚本传递的参数 |
| $$ | 脚本运行的当前进程ID号 |
| $! | <span class="Apple-tab-span" style="white-space:pre"></span>后台运行的最后一个进程的ID号 |
| $@ | 与$*相同，但是使用时加引号，并在引号中返回每个参数。 |
| $- |  |
| $? | <span class="Apple-tab-span" style="white-space:pre"></span>显示最后命令的退出状态。0表示没有错误，其他任何值表明有错误 |


