# <font color=#EE8C40>堆和栈的区别</font>

堆栈对我来说是一个很模糊的概念。堆栈：一种数据结构、一个在程序运行时用于存放的地方,这是我开始到现在对堆栈的认知.

### <font color=#378C91>数据结构的堆栈</font>
**堆和栈都是一种数据项按序排列的数据结构。**

>**栈** 就像装数据的桶或箱子
  它是一种具有后进先出性质的数据结构，也就是说后存放的先取，先存放的后取。就像将物体放入箱子中的再拿出的过程.
  
>**堆** 像一棵倒过来的树
堆是一种经过排序的树形数据结构，每个结点都有一个值。
**堆的特点:**&emsp;根结点的值最小（或最大），且根结点的两个子树也是一个堆。由于堆的这个特性，常用来实现优先队列，堆的存取是随意，这就如同我们在图书馆的书架上取书，虽然书的摆放是有顺序的，但是我们想取任意一本时不必像栈一样，先取出前面所有的书

**内存分配中的栈和堆**

> 下面就说说C语言程序内存分配中的堆和栈，一般情况下程序存放在Rom或Flash中，运行时需要拷到内存中执行，内存会分别存储不同的信息

>  内存中的栈区处于相对较高的地址以地址的增长方向为上的话，栈地址是向下增长的。

>栈中分配局部变量空间，堆区是向上增长的用于分配程序员申请的内存空间。另外还有静态区是分配静态变量，全局变量空间的；只读区是分配常量和程序代码空间的；以及其他一些分区。

#### <font color=#378C91>一个由C/C++编译的程序占用的内存分为以下几个部分 </font>
>1、栈区（stack）—   由编译器自动分配释放   ，存放函数的参数值，局部变量的值等。其  
    
> 2、堆区（heap）   —   一般由程序员分配释放，   若程序员不释放，程序结束时可能由OS回  收   。注意它与数据结构中的堆是两回事，分配方式倒是类似于链表，呵呵。  
>  3、全局区（静态区）（static）—，全局变量和静态变量的存储是放在一块的，初始化的  
>  全局变量和静态变量在一块区域，   未初始化的全局变量和未初始化的静态变量在相邻的另  一块区域。   -   程序结束后由系统释放。  
>  4、文字常量区   —常量字符串就是放在这里的。   程序结束后由系统释放  
>  5、程序代码区—存放函数体的二进制代码。  
#### 例子
```
int   a   =   0;   全局初始化区    
char   *p1;   全局未初始化区    
main()    
{    
  int   b;   栈    
  char   s[]   =   "abc";   栈    
  char   *p2;   栈    
  char   *p3   =   "123456";   123456/0在常量区，p3在栈上。    
  static   int   c   =0；   全局（静态）初始化区    
  p1   =   (char   *)malloc(10);    
  p2   =   (char   *)malloc(20);    
  分配得来得10和20字节的区域就在堆区。    
  strcpy(p1,   "123456");   123456/0放在常量区，编译器可能会将它与p3所指向的"123456"  
  优化成一个地方。    
}    
```

**0.申请方式和回收方式不同**
  堆和栈的第一个区别就是申请方式不同：栈（英文名称是stack）是系统自动分配空间的，例如我们定义一个 char a；系统会自动在栈上为其开辟空间。而堆（英文名称是heap）则是程序员根据需要自己申请的空间，例如malloc（10）；开辟十个字节的空间。
  由于栈上的空间是自动分配自动回收的，所以栈上的数据的生存周期只是在函数的运行过程中，运行后就释放掉，不可以再访问。而堆上的数据只要程序员不释放空间，就一直可以访问到，不过缺点是一旦忘记释放会造成内存泄露。
  
**1.申请后系统的响应**

>栈：只要栈的剩余空间大于所申请空间，系统将为程序提供内存，否则将报异常提示栈溢出。

>堆：首先应该知道操作系统有一个记录空闲内存地址的链表，当系统收到程序的申请时，会遍历该链表，寻找第一个空间大于所申请空间的堆。

**2.申请效率的比较**
>根据第0点和第1点可知。

>栈：由系统自动分配，速度较快。但程序员是无法控制的。

>堆：是由new分配的内存，一般速度比较慢，而且容易产生内存碎片,不过用起来最方便。

**3.申请大小的限制栈：**
>在Windows下,栈是向低地址扩展的数据结构，是一块连续的内存的区域。这句话的意思是栈顶的地址和栈的最大容量是系统预先规定好的，在 WINDOWS下，栈的大小是2M（也有的说是1M，总之是一个编译时就确定的常数），如果申请的空间超过栈的剩余空间时，将提示overflow。因此，能从栈获得的空间较小。  
堆：堆是向高地址扩展的数据结构，是不连续的内存区域。这是由于系统是用链表来存储的空闲内存地址的，自然是不连续的，而链表的遍历方向是由低地址向高地址。堆的大小受限于计算机系统中有效的虚拟内存。由此可见，堆获得的空间比较灵活，也比较大。

**4.堆和栈中的存储内容**
>由于栈的大小有限，所以用子函数还是有物理意义的，而不仅仅是逻辑意义。
栈： 在函数调用时，第一个进栈的是主函数中函数调用后的下一条指令（函数调用语句的下一条可执行语句）的地址，然后是函数的各个参数，在大多数的C编译器中，参数是由右往左入栈的，然后是函数中的局部变量。注意静态变量是不入栈的。  
> 当本次函数调用结束后，局部变量先出栈，然后是参数，最后栈顶指针指向最开始存的地址，也就是主函数中的下一条指令，程序由该点继续运行。  
堆：一般是在堆的头部用一个字节存放堆的大小。堆中的具体内容有程序员安排。



